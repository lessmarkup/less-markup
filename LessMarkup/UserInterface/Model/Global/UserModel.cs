/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

using System;
using System.Collections.Generic;
using LessMarkup.Framework.Helpers;
using LessMarkup.Interfaces.Cache;
using LessMarkup.Interfaces.Data;
using LessMarkup.Interfaces.RecordModel;
using LessMarkup.Interfaces.Security;
using LessMarkup.Interfaces.Structure;

namespace LessMarkup.UserInterface.Model.Global
{
    [RecordModel(CollectionType = typeof(Collection), TitleTextId = UserInterfaceTextIds.User, DataType = typeof(DataObjects.Security.User))]
    public class UserModel
    {
        public class Collection : IEditableModelCollection<UserModel>
        {
            private readonly IDomainModelProvider _domainModelProvider;
            private readonly IUserSecurity _userSecurity;
            private readonly IChangeTracker _changeTracker;

            public Collection(IDomainModelProvider domainModelProvider, IUserSecurity userSecurity, IChangeTracker changeTracker)
            {
                _domainModelProvider = domainModelProvider;
                _userSecurity = userSecurity;
                _changeTracker = changeTracker;
            }

            public IReadOnlyCollection<long> ReadIds(IQueryBuilder query, bool ignoreOrder)
            {
                return query.From<DataObjects.Security.User>().Where("IsRemoved = $", false).ToIdList();
            }

            public int CollectionId { get { return DataHelper.GetCollectionId<DataObjects.Security.User>(); } }

            public IReadOnlyCollection<UserModel> Read(IQueryBuilder query, List<long> ids)
            {
                return query.From<DataObjects.Security.User>().Where("IsRemoved = $", false).WhereIds(ids).ToList<UserModel>();
            }

            public bool Filtered { get { return false; } }

            public void Initialize(long? objectId, NodeAccessType nodeAccessType)
            {
            }

            public UserModel CreateRecord()
            {
                return new UserModel();
            }

            public void AddRecord(UserModel record)
            {
                using (var domainModel = _domainModelProvider.CreateWithTransaction())
                {
                    var user = new DataObjects.Security.User
                    {
                        Email = record.Email,
                        Name = record.Name,
                        Registered = DateTime.UtcNow,
                        IsBlocked = false,
                        EmailConfirmed = true,
                        IsApproved = true,
                        LastPasswordChanged = DateTime.UtcNow,
                        IsAdministrator = record.IsAdministrator,
                        Signature = record.Signature
                    };

                    string userSalt, encodedPassword;
                    _userSecurity.ChangePassword(record.Password, out userSalt, out encodedPassword);

                    user.PasswordChangeToken = null;
                    user.PasswordChangeTokenExpires = null;
                    user.Password = encodedPassword;
                    user.Salt = userSalt;
                    user.PasswordAutoGenerated = false;

                    domainModel.Create(user);

                    _changeTracker.AddChange(user, EntityChangeType.Added, domainModel);

                    domainModel.CompleteTransaction();

                    user.Password = null;

                    record.Password = null;
                    record.Id = user.Id;
                }
            }

            public void UpdateRecord(UserModel record)
            {
                using (var domainModel = _domainModelProvider.CreateWithTransaction())
                {
                    var user = domainModel.Query().From<DataObjects.Security.User>().Where("IsRemoved = $ AND Id = $", false, record.Id).FirstOrDefault<DataObjects.Security.User>();

                    user.Name = record.Name;
                    user.Email = record.Email;
                    user.IsAdministrator = record.IsAdministrator;
                    user.Signature = record.Signature;

                    if (!string.IsNullOrWhiteSpace(record.Password))
                    {
                        string userSalt, encodedPassword;
                        _userSecurity.ChangePassword(record.Password, out userSalt, out encodedPassword);

                        user.PasswordChangeToken = null;
                        user.PasswordChangeTokenExpires = null;
                        user.Password = encodedPassword;
                        user.Salt = userSalt;
                        user.PasswordAutoGenerated = false;
                        user.LastPasswordChanged = DateTime.UtcNow;
                    }

                    _changeTracker.AddChange(user, EntityChangeType.Updated, domainModel);
                    domainModel.Update(user);
                    domainModel.CompleteTransaction();

                    record.Password = null;
                }
            }

            public bool DeleteRecords(IEnumerable<long> recordIds)
            {
                using (var domainModel = _domainModelProvider.CreateWithTransaction())
                {
                    foreach (var userId in recordIds)
                    {
                        domainModel.Delete<DataObjects.Security.User>(userId);
                        _changeTracker.AddChange<DataObjects.Security.User>(userId, EntityChangeType.Removed, domainModel);
                    }
                    domainModel.CompleteTransaction();
                }
                return true;
            }

            public bool DeleteOnly { get { return false; } }
        }

        public long Id { get; set; }

        [Column(UserInterfaceTextIds.UserName)]
        [InputField(InputFieldType.Text, UserInterfaceTextIds.UserName, Required = true)]
        [RecordSearch]
        public string Name { get; set; }

        [Column(UserInterfaceTextIds.UserEmail)]
        [InputField(InputFieldType.Email, UserInterfaceTextIds.UserEmail, Required = true)]
        [RecordSearch]
        public string Email { get; set; }

        [InputField(InputFieldType.PasswordRepeat, UserInterfaceTextIds.Password, Required = true)]
        public string Password { get; set; }

        [Column(UserInterfaceTextIds.IsAdministrator)]
        [InputField(InputFieldType.CheckBox, UserInterfaceTextIds.IsAdministrator, DefaultValue = false)]
        public bool IsAdministrator { get; set; }

        public bool IsValidated { get; set; }

        public bool IsApproved { get; set; }

        public bool EmailConfirmed { get; set; }

        public bool IsBlocked { get; set; }

        [InputField(InputFieldType.RichText, UserInterfaceTextIds.Signature)]
        [RecordSearch]
        public string Signature { get; set; }
    }
}
