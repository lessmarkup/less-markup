/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

using System;
using System.Data.SqlClient;
using System.Linq;
using System.Security.Cryptography;
using System.Text;
using System.Web;
using System.Web.Security;
using LessMarkup.DataFramework;
using LessMarkup.DataObjects.Common;
using LessMarkup.DataObjects.User;
using LessMarkup.Framework.Configuration;
using LessMarkup.Framework.Security.Models;
using LessMarkup.Interfaces.Cache;
using LessMarkup.Interfaces.Data;
using LessMarkup.Interfaces.Security;
using LessMarkup.Interfaces.System;

namespace LessMarkup.Framework.Security
{
    class UserSecurity : IUserSecurity
    {
        #region Private Fields

        private const int SaltLength = 16;
        private readonly IDomainModelProvider _domainModelProvider;
        private readonly IEngineConfiguration _engineConfiguration;
        private readonly IDataCache _dataCache;
        private readonly IMailSender _mailSender;
        private readonly ISiteMapper _siteMapper;
        private readonly IChangeTracker _changeTracker;
        private const string HexCodes = "0123456789abcdef";

        #endregion

        #region Initialization

        public UserSecurity(IDomainModelProvider domainModelProvider, IEngineConfiguration engineConfiguration, IDataCache dataCache, IMailSender mailSender, ISiteMapper siteMapper, IChangeTracker changeTracker)
        {
            _domainModelProvider = domainModelProvider;
            _engineConfiguration = engineConfiguration;
            _dataCache = dataCache;
            _mailSender = mailSender;
            _siteMapper = siteMapper;
            _changeTracker = changeTracker;
        }

        #endregion

        #region IUserSecurity Implementation

        public string CreatePasswordValidationToken(long? userId)
        {
            return CreateAccessToken(EntityType.User, 0, EntityAccessType.Everyone, userId, DateTime.UtcNow + TimeSpan.FromMinutes(10));
        }

        public void ChangePassword(string password, out string salt, out string encodedPassword)
        {
            salt = GenerateSalt();
            encodedPassword = EncodePassword(password, salt);
        }

        public long CreateUser(string username, string password, string email, string address, Func<string, string> confirmation, bool generatePassword = false)
        {
            ValidateNewUserProperties(username, password, email, generatePassword);

            User user;

            using (var domainModel = _domainModelProvider.CreateWithTransaction())
            {
                CheckUserExistence(email, domainModel);

                user = CreateUserObject(username, email);

                if (generatePassword)
                {
                    password = GenerateUserPassword(user);
                    user.PasswordAutoGenerated = true;
                }

                user.Password = EncodePassword(password, user.Salt);

                try
                {
                    domainModel.GetCollection<User>().Add(user);
                    domainModel.SaveChanges();
                }
                catch (SqlException e)
                {
                    if (e.Number == 2627 || e.Number == 2601 || e.Number == 2512)
                    {
                        throw new Exception("User with specified name or e-mail already exists");
                    }

                    throw;
                }

                domainModel.GetCollection<EntityChangeHistory>().Add(new EntityChangeHistory
                {
                    ChangeType = (int)EntityChangeType.Added,
                    Created = DateTime.UtcNow,
                    EntityType = (int)EntityType.User,
                    EntityId = user.UserId,
                    UserId = user.UserId
                });

                if (_siteMapper.SiteId.HasValue)
                {
                    AddToDefaultGroup(domainModel, user);
                }

                domainModel.SaveChanges();

                if (generatePassword)
                {
                    SendGeneratedPassword(email, password, user);
                }
                else if (confirmation != null)
                {
                    SendConfirmationLink(confirmation, user);
                }
                
                if (confirmation == null)
                {
                    // means the user is created manually by the administrator
                    user.IsValidated = true;
                    domainModel.SaveChanges();
                }

                if (_siteMapper.SiteId.HasValue && _dataCache.Get<SiteConfigurationCache>().AdminNotifyNewUsers)
                {
                    var model = new NewUserCreatedModel
                    {
                        UserId = user.UserId,
                        Name = user.Name,
                        Email = user.Email
                    };

                    var administrators = domainModel.GetCollection<User>().Where(u => u.IsAdministrator && u.SiteId == _siteMapper.SiteId && !u.IsRemoved && !u.IsBlocked);
                    foreach (var admin in administrators.Select(a => a.UserId))
                    {
                        _mailSender.SendMail(null, admin, null, Constants.MailTemplates.Core.NewUserCreated, model);
                    }
                }

                domainModel.CompleteTransaction();
            }

            return user.UserId;
        }

        public string CreateAccessToken(EntityType entityType, long entityId, EntityAccessType accessType, long? userId, DateTime? expirationTime = null)
        {
            if (accessType == EntityAccessType.Everyone)
            {
                userId = null;
            }

            var hashAlgorithm = HashAlgorithm.Create("SHA512");
            if (hashAlgorithm == null)
            {
                return string.Empty;
            }
            var hashSize = hashAlgorithm.HashSize/8;
            var values = new long[5];
            var salt = new byte[SaltLength];
            var data = new byte[sizeof(long) * values.Length + salt.Length + hashSize];
            values[0] = userId ?? 0;
            values[1] = (long) entityType;
            values[2] = entityId;
            values[3] = (long) accessType;
            values[4] = expirationTime.HasValue ? expirationTime.Value.Ticks : 0;
            for (var i = 0; i < values.Length; i++)
            {
                Buffer.BlockCopy(BitConverter.GetBytes(values[i]), 0, data, i * sizeof(long), sizeof (long));
            }
            new RNGCryptoServiceProvider().GetBytes(salt);
            Buffer.BlockCopy(salt, 0, data, sizeof(long)*values.Length, salt.Length);
            var hash = hashAlgorithm.ComputeHash(data, 0, sizeof (long)*values.Length + salt.Length);
            Buffer.BlockCopy(hash, 0, data, sizeof(long)*values.Length+salt.Length, hashSize);
            data = MachineKey.Protect(data, null);
            return Convert.ToBase64String(data);
        }

        public bool ValidateAccessToken(string token, EntityType entityType, long entityId, EntityAccessType accessType, long? userId)
        {
            if (string.IsNullOrWhiteSpace(token))
            {
                return false;
            }

            var values = new long[5];

            using (var hashAlgorithm = HashAlgorithm.Create("SHA512"))
            {
                if (hashAlgorithm == null)
                {
                    return false;
                }
                var hashSize = hashAlgorithm.HashSize/8;
                var data = Convert.FromBase64String(token);
                data = MachineKey.Unprotect(data, null);
                if (data == null || data.Length != sizeof (long)*values.Length + SaltLength + hashSize)
                {
                    return false;
                }
                var hash = hashAlgorithm.ComputeHash(data, 0, sizeof (long)*values.Length + SaltLength);
                for (var i = 0; i < hash.Length; i++)
                {
                    if (hash[i] != data[sizeof (long)*values.Length + SaltLength + i])
                    {
                        return false;
                    }
                }
                for (var i = 0; i < values.Length; i++)
                {
                    values[i] = BitConverter.ToInt64(data, i * sizeof(long));
                }
            }

            var allowedAccessType = (EntityAccessType)values[3];
            var allowedUserId = values[0];

            switch (allowedAccessType)
            {
                case EntityAccessType.Read:
                    if ((accessType != EntityAccessType.Read && accessType != EntityAccessType.Everyone) || !userId.HasValue || allowedUserId != userId.Value)
                    {
                        return false;
                    }
                    break;
                case EntityAccessType.ReadWrite:
                    if ((accessType != EntityAccessType.Read && accessType != EntityAccessType.ReadWrite && accessType != EntityAccessType.Everyone) || !userId.HasValue || allowedUserId != userId.Value)
                    {
                        return false;
                    }
                    break;
                case EntityAccessType.Everyone:
                    break;
                default:
                    return false;
            }

            if (values[1] != (long) entityType)
            {
                return false;
            }
            if (values[2] != entityId)
            {
                return false;
            }

            if (values[4] != 0)
            {
                if (DateTime.UtcNow.Ticks > values[4])
                {
                    return false;
                }
            }

            return true;
        }

        public string GenerateUniqueId()
        {
            var currentTime = BitConverter.GetBytes(DateTime.UtcNow.ToBinary());
            var data = new byte[16];
            new RNGCryptoServiceProvider().GetBytes(data);
            var ret = new StringBuilder();
            foreach (var b in data)
            {
                AppendHex(b, ret);
            }
            foreach (var b in currentTime)
            {
                AppendHex(b, ret);
            }
            return ret.ToString();
        }

        public bool ConfirmUser(string validateSecret)
        {
            using (var domainModel = _domainModelProvider.CreateWithTransaction())
            {
                var user = domainModel.GetCollection<User>().FirstOrDefault(u => u.ValidateSecret == validateSecret);
                if (user == null)
                {
                    return false;
                }
                user.ValidateSecret = null;
                user.IsValidated = true;
                _changeTracker.AddChange(user.UserId, EntityType.User, EntityChangeType.Updated, domainModel);
                domainModel.SaveChanges();
                domainModel.CompleteTransaction();
                return true;
            }
        }

        #endregion

        #region Helper Methods

        public static string EncodePassword(string password, string salt)
        {
            using (var hashAlgorithm = HashAlgorithm.Create("SHA512"))
            {
                if (hashAlgorithm == null)
                {
                    throw new NotSupportedException();
                }
                var bytes = Encoding.UTF8.GetBytes(salt + password);
                return ToHexString(hashAlgorithm.ComputeHash(bytes));
            }
        }

        public static void AppendHex(byte b, StringBuilder builder)
        {
            builder.Append(HexCodes[b >> 4]);
            builder.Append(HexCodes[b & 0xF]);
        }

        public static string ToHexString(byte[] values)
        {
            var sb = new StringBuilder();
            foreach (var b in values)
            {
                AppendHex(b, sb);
            }
            return sb.ToString();
        }

        public static string ToHexString(byte[] values, int start, int count)
        {
            var sb = new StringBuilder();
            int end = start + count;
            for (int i = start; i < end; i++)
            {
                AppendHex(values[i], sb);
            }
            return sb.ToString();
        }

        private const string PasswordDictionary = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890_-!?";

        public string GeneratePassword()
        {
            var data = new byte[16];
            new RNGCryptoServiceProvider().GetBytes(data);

            string ret = "";

            for (int i = 0; i < 8; i++)
            {
                ret += PasswordDictionary[data[i]%PasswordDictionary.Length];
            }

            return ret;
        }

        public static string GenerateSalt()
        {
            var data = new byte[16];
            new RNGCryptoServiceProvider().GetBytes(data);
            return Convert.ToBase64String(data);
        }

        private User CreateUserObject(string username, string email)
        {
            var user = new User
            {
                Salt = GenerateSalt(),
                Email = email,
                Name = username,
                Registered = DateTime.UtcNow,
                IsBlocked = false,
                IsValidated = false,
                LastLogin = DateTime.UtcNow,
                LastBlock = null,
                LastActivity = DateTime.UtcNow,
                ValidateSecret = Guid.NewGuid().ToString(),
                SiteId = _siteMapper.SiteId
            };

            return user;
        }

        private static void ValidateNewUserProperties(string username, string password, string email, bool generatePassword)
        {
            if (!TextValidator.CheckUsername(username))
            {
                throw new Exception("Invalid User Name");
            }

            if (!generatePassword && !TextValidator.CheckPassword(password))
            {
                throw new Exception("Invalid Password");
            }

            if (!generatePassword && !TextValidator.CheckNewPassword(password))
            {
                throw new Exception("Password does not meet minimal complexity criteria");
            }

            while (!string.IsNullOrEmpty(email) && (email[email.Length - 1] == '.' || Char.IsWhiteSpace(email[email.Length - 1])))
            {
                email = email.Remove(email.Length - 1, 1);
            }

            if (!TextValidator.CheckTextField(email) || !EmailCheck.IsValidEmail(email))
            {
                throw new Exception("Invalid E-Mail");
            }
        }

        private string GenerateUserPassword(User user)
        {
            if (!_engineConfiguration.SmtpConfigured)
            {
                throw new Exception("SMTP is not configured");
            }

            var password = GeneratePassword();

            user.IsValidated = true;
            user.LastActivity = null;
            user.LastLogin = null;
            user.LastPasswordChanged = null;
            user.ValidateSecret = null;
            user.RegistrationExpires = DateTime.UtcNow + TimeSpan.FromDays(1);
            return password;
        }

        private void CheckUserExistence(string email, IDomainModel domainModel)
        {
            if (domainModel.GetCollection<User>().Any(c => c.Email == email && !c.IsRemoved && c.SiteId == _siteMapper.SiteId))
            {
                throw new Exception("User with specified e-mail already exists");
            }
        }

        private void AddToDefaultGroup(IDomainModel domainModel, User user)
        {
            var defaultGroup = _dataCache.Get<SiteConfigurationCache>().DefaultUserGroup;

            if (!string.IsNullOrEmpty(defaultGroup))
            {
                var group = domainModel.GetSiteCollection<UserGroup>().SingleOrDefault(g => g.Name == defaultGroup);

                if (group == null)
                {
                    group = domainModel.GetSiteCollection<UserGroup>().Create();
                    group.Name = defaultGroup;
                    domainModel.GetSiteCollection<UserGroup>().Add(group);
                    domainModel.SaveChanges();
                }

                var membership = domainModel.GetSiteCollection<UserGroupMembership>().Create();
                membership.UserId = user.UserId;
                membership.UserGroupId = group.UserGroupId;
                domainModel.GetSiteCollection<UserGroupMembership>().Add(membership);
            }
        }

        private void SendConfirmationLink(Func<string, string> confirmation, User user)
        {
            var confirmationLink = confirmation(user.ValidateSecret);
            var confirmationModel = new UserConfirmationMailTemplateModel { Link = confirmationLink };

            _mailSender.SendMail(null, user.UserId, null, Constants.MailTemplates.Core.ValidateUser, confirmationModel);
        }

        private void SendGeneratedPassword(string email, string password, User user)
        {
            var notificationModel = new GeneratedPassswordModel
            {
                Login = email,
                Password = password,
                SiteLink = HttpContext.Current.Request.Url.Host,
                SiteName = _dataCache.Get<SiteConfigurationCache>().SiteName
            };

            _mailSender.SendMail(null, user.UserId, null,
                Constants.MailTemplates.Core.PasswordGeneratedNotification, notificationModel);
        }

        #endregion
    }
}
